    #######
    Note: the action read 1 line only then execute or not on the line called record in awk
    #######

    Just like sed awk is a command that help you edit text and then output the result but have many
    more useful function

    Use:
        awk <script> <file_name>

        script: is combined by pattern and action: pattern {action} the action will be decided to 
        be excuted or not base on condition and will only run on 1 by 1 line of the pattern. In order
        not to be read as shell's special meaning we add single quote to it : 'pattern {action}'
        you can execute without the condition but this will mean that all of the output will be 
        matched as the 
    
        print_action: help you print out a part or all of the line (output) that you want to
        Ex: ls -l | awk '{print $5,$9}'   print the fifth and nineth column of the ls output with no 
                                                      pattern (condition) so in here we have $ stand
                                                      for the field (column space seperated by space)
                                                      and we have $0 stand for the whole line. 
              
          Remember that , help you seperate output with space try to use print without adding, and 
          you will understand what I mean

          $NF variable stand for the last column we have so if you want print out the last column, 
          and we can use number  with $ like we do with the list in python 
          Ex: {print $(NF-1), $(NF-2)} you use + and - NF or number in $ as well

          With pattern in awk RE will be understand as the extended version but you have to add /
          before and after the word to either version. Use ~ to compare the pattern 
            Ex: awk '$9 ~ txt/$ {print $5,$NF}'

    Try:
        ls  -l | awk '$9 ~ at {print $5,$NF}'
        ls  -l /usr/bin/| awk '$9 ~ /(txt)/ {print $0}'
        ls -l | awk '$9 ~ /(at)/ {print $5,$NF}'
        ls -l| awk '/(py)/ {print $0}'  



     When you don't give anything for the action it will be set as print $0
     Ex: They are all have the same meaning
        awk '$9 ~ /^cp/'
        awk '$9 ~ /^cp/ {print}'
        awk '$9 ~ /^cp/ {print $0}'

     Try:   seem like we need to add , when using the option
        Now we are going to use awk command to calculate the average score of student from text file
        (score.txt)

        awk -F, '{print $1, $2, $3}' score.txt               seperate all of the field
        awk -F, '{print $NF}' score.txt                      print out the score only
        awk -F, '{sum += $NF} END{print sum}' score.txt      sum is 0 at first print sum after all
                                                                               records have finished
        awk -F, '{sum += $NF} END{print "Average:",sum/NR}' score.txt  calculate the average score, 
                                                                               NR is the sum of 
                                                                               number of time the 
                                                                               record has been runned

        You can also save the the command line as the file average.awk (it can be wat ever) and 
        reuse it later:
            awk -F, -f average.ake score.txt

