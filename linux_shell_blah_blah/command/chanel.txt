#########
 This file help you know better about how a command work in I/O
#########

 When user use cat command a standard input chanel called stdin is opened - a chanel is the way 
 that data flows - so when we used command a chanel is opened and the data start exchanging. 

Here we have three standard I/O chanel:
    stdin: the standard input of program, usually keyboard is used
    stdout: the stadard output of program, usually the terminal's display is used
    stderr: the standard error message's output of program, like stdout usually terminal's terminal
    is used

In every command we hav these 3 to I/O.

When user used the cat command without any argument the stdin will be opened and everything you input
will be the stdout

Standard Input リディレクトリ:
    There is a thing called リディレクトリwhich mean changing the std I/O destination use < to 
    activate it with cat and it will just output what is inputed (content of file). Maybe it is 
    hard to understand now but afterward it will be very useful to create your own command
    Ex:
        "cat < /etc/crontab" != "cat /etc/crontab"

Standard Output リディレクトリ:
    When you use command to output somethng and want to save that into a file
    use this symbol '>' plus the name of the file that you want to save to.
    This mean you will change the destination of the stdout of the command into a
    file (リディレクトリ)

    Ex: 
        "ls -l > list.txt"
    
Standard Error Output:
    Every command have error message output. If you use ls with file_not_exist 
    you wil receive an error message from terminal (stderr). Normally, both stdout
    and stderr are outputed to the terminal that is why we can't tell the diff 
    but there is one diff between them , that is the output's destination of 
    stdout can be changed to a file but stderr's one can't do that the error 
    message is going to be printed to the terminal no matter you use '>' or not
    Ex:
        "ls not_exist > file.txt" 
        if the output is:
              stdout: the output will be saved to the file
              stderr: the output will still be printed to the terminal (and no content file is created)

     But stderr can be リディレクトリ to a file if you use '2>' different from 
    stdout. And by doing this you can divide the stdout and stderr to 2 diff files
    Ex: python file.py > content.txt 2> file_err.txt


When you want to リディレクトリ both stdout and stderr to the same file use the
following command:
    Ex:
    'command > file_name.txt 2>&1'

The meaning of this is save the stdout to file.txt then the stderr will be 
considered as stdout (by using 2>&1) so the stderr will be in the same file with
stdout. In here we are telling that the stderr is stdout by using number of 
std I/O:
    stdin: 0
    stdout: 1
    stderr: 2

try err.py to know better


###########
Warning
###########

When you リディレクトリthe output to a file, if a file not exists it will be 
created, if it already there it will be overiden (the spell can be wrong). If 
you are not carefully and make a miss can delete an important file that is why 
we have 
    1. '>>' which mean append to the end of that file (if file not exist then 
    it will create the file) so when you intend to rapidly save some cont to a 
    file you better use '>>' instead of '>'. 
    
    2. Or you can use an option of shell name noclobber by using set command.
    Thanks to it if you can't overriden an existing file with '>'

Summary:
    
    < FILE: stdin will be change to the file (the thing u input is a file)
    > FILE: change stdout to a file
    >> FILE: append stdout to the file
    2> FILE: change stderr to the file
    2>>: append ...
    > FILE 2>&1: read the upper things
