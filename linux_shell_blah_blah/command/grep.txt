    A powerful command that help you search str in linux (remember it only search inside the file
    or the output you can't search it with dir or ps that is why we use it with pipe line)
    Use:
        grep [option] <pattern> <file_name>
        
        Like this the command will help you find the pattern inside the file
        Ex: grep PS1 ~/.bashrc

        Common used option:
        -n: output the line number that the pattern stay in
        -i: ignore case (upper A, lower a) and show you all the matching pattern
        -v: show all the things that not match the pattern

     The most efficient way to use grep is use it with other searching command like ps or ls or...
     Ex: ps aux|grep python
            ls -a |grep l*


    ###################
    Regular Expression:

     Regular expression are series of symbols that help you represent some meaning when it come to 
     string( like regular expresion in python). These have special meaning and they are called meta 
     character, all of these characters have special meaning for both shell and official expresion
     so in order not to activate the special meaning in shell and to activate the special meaning in
     official expresion we add single quote to it
    ###################


    ##############
    Meta character

    .  : will match one any character (Ex: ls | grep'word.', you can use it more than one time to
           match any character Ex: ls |grep 'bas...', 'a...d','..o.txt')
           some time if you search some . file like .py or .org it won't just show you the .org file 
           but it also output something like this borg, sorg to disable the special meaning add \ to 
           the head of the word 
     
     [] : will help you match some specific character that you want just put them inside the '[]' and
           it will help you.
           Ex: grep 'm[aeo]th' (it will match math, meth, moth)
                grep 'm[a-z]th' (match the word m + (any from a to z) + th)
                grep 'm[a-zA-Z]'
                grep 'mail[1-4]'  match mail from 1 to 4
                grep 'mail[146]'  just match the one that have 1 or 4 or 6 in it
                grep '[^123]'     match thing that have 1 or 2 or 3 at the head of line
     
     $  : stand for the end of the line so if you want to find some .py, .txt, .c, .cpp file just
           it to the end of the pattern (grep 'py$')

     ^  : stand for the head of the line (add it like this '^pattern' == the pattern is in the head 
           of line)

    *  : stand for the loop matching more than 0 time (Ex: grep 'Be*r' it will match Br, Ber, Beer, 
           Beeeer, Beeeeeeeeeeeeeer,... ) so it will keep searching for the word star with B and end 
           with r and there are none or many e characters.
           If you want to find the loop of other character as well use grep '[eaoi]*' 
           Another use to mix other metacharacter grep '^B[ea]$', grep '^B.*'

     [^]: match any of the character except those in the bracket Ex: [^1-9]
    ##############
  
    ########
    Extended RE (Regular Expression)
    
    It's a little bit different from RE, just like the name of it with this we can use many more 
    metacharacter but the syntax is a little bit different from normal RE so you remember to use 
    it seperate. To use the Extended with grep you add -E to it (expasion not normal anymore)
        Ex: grep -E 'Be+r' file_name (using the + metacharacter from Expasion RE)
    
    @Note: Seem like the grep command using in Linux (GNU grep) can still using the expasion meta 
    without adding -E but instead add the \ to the meta and activate one part only
        Ex: grep 'Be\+r' file_name

     + : stand for the loop matching more than 1 time (so the Br won't gonna come out)

     ? : stand for the loop matching 0 or 1 time (Ex: ls | grep -E 'Wine ?Wine'  is going to match 
          the word 'WineWine' or 'Wine Wine' because the space is loop 0 or 1)

    () : will group a word into one input and help you use with other metacharacter often used to
           group word
           Ex: grep 'Ber\{2,\}' will match ouput like this Berrrr, Berr, ...
                grep '(Beer)\{2,\}' will match output like this BeerBeer, BeerBeer, BeerBeerBeer

     |  : stand for the or expression
           Ex: grep '(Beer) | (Wine) | (Juice)' will match the output have word Beer or Wine or Juice

    {}: can help you limit the loop matching value to the number of times that you want (
          Ex: ls|grep -E 'Be{1,2}r' will match the loop of e from 1 to 2 times which mean Ber or 
          Beer)
          Ex: grep 'Be\{2,\}r' will mean match more than 2 times
               grep 'Be\{2\}r' match exact 2 times
               grep -E'0[0-9]0 (([0-9]{4}) ?){2}' search phone number  
    ########

    #####
    Note:

    There is a lot of strong metacharacter find about it on the internet later
    #####


