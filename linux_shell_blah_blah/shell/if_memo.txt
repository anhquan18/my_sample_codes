    We have || to connect 2 command as well, this one is the reverse function 
    of &&:
        cmd1 || cmd2 : is if the exit status of cmd1 is not 0 then execute cmd2
                            which mean if cmd1 not exit normally then execute cmd2
         Ex: [ -f "file.txt" ] || touch file.txt

    
    ##### Use && and || with if
    use && can help you create and statement, || help you create or satement
        Ex: int1=$1
              if [ $int1 -gt 3 ] && [ $int1 -lt 6 ]; then 
                echo "3 < $int1 < 6"
              fi
       
              if [ $path = '/home' ] || [ $path = '/usr' ]; then 
                echo "$path is a dir"

     You can return the exit statsus inside the shell script file you created as 
     well. The exit status of a sh file is the exit status of the last command 
     in the file

     When you want to specifyã€€your own exit status you can use the exit command
     and of course like sys.exit this command will exit from your shell script as
     well

        exit <exit status>

     If you don't add any number to exit then the exit status will be the one of
     the last command

     try exit file 

     You can return the exit status from function as well 
     Ex: 
        func ()
        {
            return 0
        }   
